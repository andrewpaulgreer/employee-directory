{"version":3,"sources":["components/Card.js","components/SearchAndTable.js","App.js","serviceWorker.js","index.js"],"names":["Each","props","scope","index","User","name","first","last","email","cell","Table","state","original","current","sortDirection","onSortChange","setState","handleSearches","term","updatedList","filter","user","toLowerCase","includes","console","log","this","sorted","sort","a","b","className","type","aria-label","placeholder","onChange","event","target","value","onClick","map","Card","key","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"g+qBAeeA,EAbF,SAAAC,GACT,OACA,4BACA,wBAAIC,MAAM,OAAOD,EAAME,MAAO,GAC9B,wBAAID,MAAM,OAAOD,EAAMG,KAAKC,KAAKC,OACjC,wBAAIJ,MAAM,OAAOD,EAAMG,KAAKC,KAAKE,MACjC,wBAAIL,MAAM,OAAOD,EAAMG,KAAKI,OAC5B,wBAAIN,MAAM,OAAOD,EAAMG,KAAKK,QCLXC,E,4MACnBC,MAAQ,CACNC,SAAU,GACVC,QAAS,GACTC,cAAe,G,EAWnBC,aAAe,WACoB,IAA7B,EAAKJ,MAAMG,cACb,EAAKE,SAAS,CAAEF,eAAgB,IAEhC,EAAKE,SAAS,CAAEF,cAAe,K,EAMjCG,eAAiB,SAAAC,GACf,IAAMC,EAAc,EAAKR,MAAMC,SAASQ,QACtC,SAAAC,GAAI,OACFA,EAAKhB,KAAKC,MAAMgB,cAAcC,SAASL,EAAKI,gBAC5CD,EAAKhB,KAAKE,KAAKe,cAAcC,SAASL,EAAKI,kBAE7C,EAAKN,SAAS,CACVH,QAASM,IAEbK,QAAQC,IAAIN,I,kEA3BdO,KAAKV,SAAS,CACZJ,SAAUS,EACVR,QAASQ,M,+BA2BH,IAAD,OAGDM,EAASD,KAAKf,MAAME,QAAQe,MAAK,SAACC,EAAGC,GACzC,OAAiC,IAA7B,EAAKnB,MAAMG,cACNe,EAAExB,KAAKC,MAAQwB,EAAEzB,KAAKC,MAAQ,GAAK,EAEnCuB,EAAExB,KAAKC,MAAQwB,EAAEzB,KAAKC,MAAQ,GAAK,KAI9C,OACE,oCACA,6BACE,wBAAIyB,UAAU,SAAQ,oDAEtB,2BACCC,KAAK,OAAOD,UAAU,sBAAsBE,aAAW,QACvDC,YAAY,SACbC,SAAU,SAAAC,GAAK,OAAI,EAAKnB,eAAemB,EAAMC,OAAOC,UACpD,2BAAOP,UAAU,kCACf,+BACE,4BACE,wBAAI7B,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAM,4BAAQ8B,KAAK,SAASO,QAASb,KAAKX,cAApC,eAChB,wBAAIb,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,gBAGJ,+BACGyB,EAAOa,KAAI,SAACnB,EAAMlB,GAAP,OACV,kBAACsC,EAAD,CAAMrC,KAAMiB,EAAMlB,MAAOA,EAAOuC,IAAKrB,EAAKsB,GAAGL,kB,GApExBM,aCMpBC,EANH,WACV,OACA,kBAAE,EAAF,OCMkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.a88ac7c1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Each = props =>{\n    return(\n    <tr>\n    <th scope=\"col\">{props.index +1}</th>  \n    <th scope=\"col\">{props.User.name.first}</th>\n    <th scope=\"col\">{props.User.name.last}</th>\n    <th scope=\"col\">{props.User.email}</th>   \n    <th scope=\"col\">{props.User.cell}</th> \n    </tr>\n    \n    )\n}\n\nexport default Each","import React, { Component } from \"react\";\nimport user from \"../lib/user.json\";\nimport Card from \"./Card.js\";\n\nexport default class Table extends Component {\n  state = {\n    original: [],\n    current: [],\n    sortDirection: 1\n  };\n  componentDidMount() {\n    this.setState({\n      original: user,\n      current: user\n    });\n  }\n\n  \n// do sorting here\nonSortChange = ()=> {\n  if (this.state.sortDirection === 1) {\n    this.setState({ sortDirection: -1 });\n  } else {\n    this.setState({ sortDirection: 1 });\n  }\n}\n    \n  \n    \n  handleSearches = term => {\n    const updatedList = this.state.original.filter(\n      user =>\n        user.name.first.toLowerCase().includes(term.toLowerCase()) ||\n        user.name.last.toLowerCase().includes(term.toLowerCase())\n       );\n      this.setState({\n          current: updatedList\n      })\n      console.log(updatedList)\n  };\n  render() {\n   \n\n    const sorted = this.state.current.sort((a, b) => {\n      if (this.state.sortDirection === 1) {\n        return a.name.first > b.name.first ? 1 : -1\n      } else {\n        return a.name.first < b.name.first ? 1 : -1\n      }\n    });\n\n    return (\n      <>\n      <div>\n        <h1 className=\"title\"><strong>User Directory</strong></h1>\n      </div>\n        <input \n         type=\"text\" className=\"form-control search\" aria-label=\"Large\"\n         placeholder=\"Search\"\n        onChange={event => this.handleSearches(event.target.value)} />\n        <table className=\"table table-striped table-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">number</th>\n              <th scope=\"col\"><button type=\"button\" onClick={this.onSortChange}>First Name</button></th>\n              <th scope=\"col\">Last Name</th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Cell Phone</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sorted.map((user, index) => (\n              <Card User={user} index={index} key={user.id.value} />\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport SearchAndTable from \"./components/SearchAndTable.js\"\n\nconst App = () => {\n  return (\n  < SearchAndTable />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}